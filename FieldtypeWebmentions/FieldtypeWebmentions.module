<?php namespace ProcessWire;

use DateTime;
use PDO;


/**
 * ProcessWire Webmentions Fieldtype
 *
 * A field that stores webmentions for a single Page.
 *
 * @author Gregor Morrill, https://gregorlove.com
 * @see https://webmention.net/
 */

$dirname = dirname(__FILE__);
require_once($dirname . '/WebmentionItem.php');
require_once($dirname . '/WebmentionArray.php');
require_once($dirname . '/WebmentionList.php');

class FieldtypeWebmentions extends FieldtypeMulti
{
	/**
	 * Current database schema fieldtype tables
	 * @var int SCHEMA_VERSION
	 */
	const SCHEMA_VERSION = 1;


	/**
	 * Provide module information to ProcessWire
	 * @access public
	 * @return array
	 */
	public static function getModuleInfo()
	{
		return array(
			'title'		=> __('Webmentions', __FILE__),
			'version'	=> 111,
			'summary'	=> __('Field that stores webmentions for a single Page', __FILE__),
		);
	} # end method getModuleInfo()


	/**
	 * Initialization for the fieldtype
	 * @access public
	 */
	public function init()
	{
		parent::init();

		$date = new DateTime();
		$gmt_offset = $date->format('P');
		$this->database->query("SET @@session.time_zone = '{$gmt_offset}'");
	} # end method init()


	/**
	 * Return blank value for the fieldtype
	 * @param Page $page
	 * @param Field $field
	 * @access public
	 * @return WebmentionArray
	 */
	public function getBlankValue(Page $page, Field $field)
	{
		$webmentionArray = new WebmentionArray();
		$webmentionArray->setPage($page);
		$webmentionArray->setField($field);
		$webmentionArray->setTrackChanges(TRUE);
		return $webmentionArray;
	} # end method getBlankValue()


	/**
	 * @access public
	 */
	public function sanitizeValue(Page $page, Field $field, $value)
	{

		if ( $value instanceof WebmentionArray )
		{
			return $value;
		}

		$webmentionArray = $pages->get($field->name);

		if ( !$value )
		{
			return $webmentionArray;
		}

		if ( $value instanceof Webmention )
		{
			return $webmentionArray->add($value);
		}

		if ( !is_array($value) )
		{
			$value = array($value);
		}

		foreach ( $value as $webmention )
		{
			$webmentionArray->add($webmention);
		}

		return $webmentionArray;
	} # end method sanitizeValue()


	/**
	 * @access public
	 */
	public function getInputfield(Page $page, Field $field)
	{
		$inputfield = $this->modules->get('InputfieldWebmentions');

		if ( !$inputfield )
		{
			return NULL;
		}

		$inputfield->class = $this->className();

		return $inputfield;
	} # end method getInputfield()


	/**
	 * Update a query to match the text with a fulltext index
	 * @access public
	 */
	public function getMatchQuery($query, $table, $subfield, $operator, $value)
	{

		if ( $subfield == 'text' )
		{
			$subfield = 'content';
		}

		if ( empty($subfield) || $subfield === 'content' )
		{
			$ft = new DatabaseQuerySelectFulltext($query);
			$ft->match($table, $subfield, $operator, $value);
			return $query;
		}

		return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
	} # end method getMatchQuery()


	/**
	 * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array $value
	 * @return string|int|array|object $value
	 * @access public
	 */
	public function ___wakeupValue(Page $page, Field $field, $value)
	{

		if ( $value instanceof WebmentionArray )
		{
			return $value;
		}

		$webmentionArray = $this->getBlankValue($page, $field);
		$editable = $page->editable();

		if ( empty($value) || !is_array($value) )
		{
			return $webmentionArray;
		}

		foreach ( $value as $sort => $item )
		{

			if ( !is_array($item) )
			{
				continue;
			}

			$webmention = new WebmentionItem();

			foreach ( $item as $key => $val )
			{

				if ( $key == 'data' )
				{
					$key = 'microformats';
				}

				$webmention->set($key, $val);
			}

			$webmention->resetTrackChanges(TRUE);
			$webmentionArray->add($webmention);
		}

		if ( $field->sortNewest )
		{
			$webmentionArray->sort('-updated');
		}

		$webmentionArray->resetTrackChanges(TRUE);

		return $webmentionArray;
	} # end method ___wakeupValue()


	/**
	 * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array|object $value
	 * @return string|int
	 * @access public
	 */
	public function ___sleepValue(Page $page, Field $field, $value)
	{
		$sleepValue = array();

		if ( !$value instanceof WebmentionArray )
		{
			return $sleepValue;
		}

		$schemaVersion = $field->schemaVersion;

		foreach ( $value as $webmention )
		{
			$a = array(
				'data'				=> $webmention->microformats,
				'id'				=> $webmention->id,
				'md5key'			=> $webmention->md5key,
				'source_url'		=> $webmention->source_url,
				'target_url'		=> $webmention->target_url,
				'vouch_url'			=> $webmention->vouch_url,
				'type'				=> $webmention->type,
				'is_like'			=> $webmention->is_like,
				'is_repost'			=> $webmention->is_repost,
				'is_rsvp'			=> $webmention->is_rsvp,
				'content'			=> $webmention->content,
				'url'				=> $webmention->url,
				'name'				=> $webmention->name,
				'author_name'		=> $webmention->author_name,
				'author_photo'		=> $webmention->author_photo,
				'author_logo'		=> $webmention->author_logo,
				'author_url'		=> $webmention->author_url,
				'published'			=> empty($webmention->published) ? $webmention->created : $webmention->published,
				'published_offset'	=> $webmention->published_offset,
				'updated'			=> empty($webmention->updated) ? $webmention->created : $webmention->updated,
				'updated_offset'	=> $webmention->updated_offset,
				'status'			=> $webmention->status,
				'visibility'		=> $webmention->visibility,
				'created'			=> $webmention->created,
			);

			if ( $schemaVersion > 0 )
			{
				$a['content_plain'] = $webmention->content_plain;
			}

			$sleepValue[] = $a;
		}

		return $sleepValue;
	} # end method ___sleepValue()


	/**
	 * Placeholder for potential granular webmention approval controls
	 * @param Page $page
	 * @param Field $field
	 * @param WebmentionItem $webmention
	 * @access protected
	 */
	protected function checkNewWebmention(Page $page, Field $field, WebmentionItem $webmention)
	{
		return;
	} # end method checkNewWebmention()


	/**
	 * Placeholder for potential email notification of new webmentions
	 * @param Page $page
	 * @param Field $field
	 * @param WebmentionItem $webmention
	 * @access protected
	 */
	protected function ___sendNotificationEmail(Page $page, Field $field, WebmentionItem $webmention)
	{
		return;
	} # end method ___sendNotificationEmail()


	/**
	 * Schema for the Webmentions Fieldtype
	 * @param Field $field
	 * @access public
	 * @return array
	 */
	public function getDatabaseSchema(Field $field)
	{
		$table_exists = in_array($field->getTable(), $this->database->getTables());
		$current_schema_version = (int) $field->schemaVersion;
		$new_schema_version = null;

		# if: table exists; perform schema updates as necessary
		if ( $table_exists )
		{

			# update to schema version 1
			if ( $current_schema_version < 1 )
			{
				$table = $this->database->escapeTable($field->getTable());

				try
				{
					$this->database->query("ALTER TABLE `$table` ADD content_plain TEXT");
					$new_schema_version = 1;
				}
				catch ( Exception $e )
				{
					$this->message('Altering schema failed: %s', $e->getMessage(), Notice::log);
				}

			}

		}
		# else: table doesn't exist yet; use latest schema
		else
		{
			$this->message(sprintf('Setting initial schema version of field “%s” to: %d', $field->name, self::SCHEMA_VERSION), Notice::log);
			$field->schemaVersion = self::SCHEMA_VERSION;
			$field->save();
		} # end if

		# if: update schema version if necessary
		if ( $current_schema_version < $new_schema_version )
		{
			$message = sprintf('Updating schema version of field “%s” from: %d to: %d',
				$field->name,
				$current_schema_version,
				$new_schema_version
			);
			$this->message($message, Notice::log);
			$field->schemaVersion = $new_schema_version;
			$field->save();
		}

		$current_schema_version = $field->schemaVersion;
		$schema = parent::getDatabaseSchema($field);

		$schema['data'] = 'text';
		$schema['id'] = "int unsigned NOT NULL auto_increment";
		$schema['md5key'] = "varchar(32) NOT NULL DEFAULT ''";
		$schema['source_url'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['target_url'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['vouch_url'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['type'] = "enum('reply','mention','legacy') NOT NULL DEFAULT 'mention'";
		$schema['is_like'] = "tinyint(1) unsigned NOT NULL DEFAULT '0'";
		$schema['is_repost'] = "tinyint(1) unsigned NOT NULL DEFAULT '0'";
		$schema['is_rsvp'] = "tinyint(1) unsigned NOT NULL DEFAULT '0'";
		$schema['content'] = 'text';

		if ( $current_schema_version > 0 )
		{
			$schema['content_plain'] = 'text';
		}

		$schema['url'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['name'] = 'text';
		$schema['author_name'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['author_photo'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['author_logo'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['author_url'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['author_email'] = "varchar(255) NOT NULL DEFAULT ''";
		$schema['published'] = "timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP";
		$schema['published_offset'] = "tinyint(1) NOT NULL DEFAULT '0'";
		$schema['updated'] = "timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'";
		$schema['updated_offset'] = "tinyint(1) NOT NULL DEFAULT '0'";
		$schema['status'] = "tinyint(3) NOT NULL DEFAULT '0'";
		$schema['visibility'] = "tinyint(3) NOT NULL DEFAULT '0'";
		$schema['created'] = "timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'";
		$schema['deleted'] = "timestamp NULL DEFAULT NULL";

		$schema['keys']['primary'] = "PRIMARY KEY (`id`)";
		$schema['keys']['pages_id_sort'] = "KEY `pages_id_sort` (`pages_id`, `sort`)";
		$schema['keys']['md5key'] = "UNIQUE KEY `md5key` (`md5key`)";
		$schema['keys']['data'] = "FULLTEXT KEY `data` (`data`)";

		return $schema;
	} # end method getDatabaseSchema()


	/**
	 * Per the Fieldtype interface, Save the given Field from the given Page to the database
	 * @param Page $page
	 * @param Field $field
	 * @return bool
	 * @access public
	 */
	public function ___savePageField(Page $page, Field $field)
	{

		if ( !$page->id || !$field->id )
		{
			return FALSE;
		}

		$allItems = $page->get($field->name);
		$database = $this->wire('database');
		$table = $database->escapeTable($field->table);

		if ( !$allItems )
		{
			return FALSE;
		}

		if ( !$allItems->isChanged() && !$page->isChanged($field->name) )
		{
			return TRUE;
		}

		$itemsRemoved = $allItems->getItemsRemoved();

		if ( count($itemsRemoved) )
		{

			foreach ( $itemsRemoved as $item )
			{

				if ( !$item->id )
				{
					continue;
				}

				$query = $database->prepare("DELETE FROM `$table` WHERE id=:item_id AND pages_id=:pages_id");
				$query->bindValue(":item_id", $item->id, PDO::PARAM_INT);
				$query->bindValue(":pages_id", $page->id, PDO::PARAM_INT);
				$query->execute();
			}

		}

		$maxSort = 0;
		$items = $allItems->makeNew();

		foreach ( $allItems as $item )
		{

			if ( $item->isChanged() || !$item->id )
			{
				$items->add($item);
			}


			if ( $item->sort > $maxSort )
			{
				$maxSort = $item->sort;
			}

		}

		if ( !count($items) )
		{
			return TRUE;
		}

		$values = $this->sleepValue($page, $field, $items);
		$value = reset($values);
		$keys = is_array($value) ? array_keys($value) : array('data');

		# cycle through the values, executing an update query for each
		foreach ( $values as $value )
		{
			$sql = $value['id'] ? 'UPDATE ' : 'INSERT INTO ';
			$sql .= "`{$table}` SET pages_id=" . ((int) $page->id) . ', ';

			# if the value is not an associative array, then force it to be one
			if ( !is_array($value) )
			{
				$value = array('data' => $value);
			}

			# cycle through the keys, which represent DB fields (i.e. data, description, etc.) and generate the update query
			foreach ( $keys as $key )
			{

				if ( $key == 'id' )
				{
					continue;
				}


				if ( $key == 'sort' && !$value['id'] )
				{
					continue;
				}

				$v = $value[$key];
				$sql .= $database->escapeCol($key) . "='" . $database->escapeStr("$v") . "', ";
			}

			if ( $value['id'] )
			{
				$sql = rtrim($sql, ', ') . ' WHERE id=' . (int) $value['id'];
			}
			else
			{
				$sql .= 'sort=' . ++$maxSort;
			}

			if ( FALSE === $database->exec($sql) )
			{
				$this->error("Error saving item $value[id] in savePageField", Notice::log);
			}

		}

		return TRUE;
	} # end method ___savePageField()


	/**
	 * Delete a given webmention
	 * @param Page $page
	 * @param Field $field
	 * @param WebmentionItem $webmention
	 * @return mixed
	 */
	public function deleteWebmention(Page $page, Field $field, WebmentionItem $webmention)
	{
		$table = $this->wire('database')->escapeTable($field->getTable());
		$sql = "DELETE FROM `$table` WHERE id=:id AND pages_id=:pages_id";
		$query = $this->wire('database')->prepare($sql);
		$query->bindValue(':id', $webmention->id, PDO::PARAM_INT);
		$query->bindValue(':pages_id', $page->id, PDO::PARAM_INT);
		$webmentions = $page->get($field->name);

		try
		{
			$this->wire('pages')->saveFieldReady($page, $field);
			$result = $query->execute();

			if ( $webmentions )
			{
				$webmentions->remove($webmention);
			}

			$this->wire('pages')->savedField($page, $field);
		}
		catch ( Exception $e )
		{
			$this->error($e->getMessage());
			$result = false;
		}

		return $result;
	} # end method deleteWebmention


	/**
	 * Configuration that appears with each Webmention fieldtype
	 * @param Field $field
	 * @access public
	 */
	public function ___getConfigInputfields(Field $field)
	{
		$inputfields = parent::___getConfigInputfields($field);

		$name = 'sortNewest';
		$f = $this->fuel('modules')->get('InputfieldCheckbox');
		$f->attr('name', $name);
		$f->attr('value', 1);
		$f->attr('checked', $field->$name ? 'checked' : '');
		$f->label = $this->_('Sort newest to oldest?');
		$f->description = $this->_('By default, webmentions will sort chronologically (oldest to newest). To reverse that behavior check this box.');
		$f->columnWidth = 50;
		$inputfields->append($f);

		$name = 'quietSave';
		$f = $this->fuel('modules')->get('InputfieldCheckbox');
		$f->attr('name', $name);
		$f->attr('value', 1);
		$f->attr('checked', $field->$name ? 'checked' : '');
		$f->label = $this->_('Quiet save?');
		$f->columnWidth = 50;
		$f->description = $this->_('When checked, the page modification time and user will not be updated when a webmention is added.');
		$inputfields->append($f);

		$name = 'schemaVersion';
		$f = $this->fuel('modules')->get('InputfieldHidden');
		$f->attr('name', $name);
		$value = (int) $field->$name;
		$f->attr('value', $value);
		$f->label = 'Schema Version';
		$inputfields->append($f);

		return $inputfields;
	} # end method ___getConfigInputfields()


	/**
	 * For FieldtypeMulti interface, return NULL to indicate that the field is not auto-joinable
	 * @param Field $field
	 * @param DatabaseQuerySelect $query
	 * @access public
	 */
	public function getLoadQueryAutojoin(Field $field, DatabaseQuerySelect $query)
	{
		return NULL;
	} # end method getLoadQueryAutojoin()


	/**
	 * Given a field and a selector, find all webmentions matching the selector (non-static version)
	 *
	 * Note that if you don't specify a limit=n, it will default to a limit of 10
	 * If you don't specify a sort, it will default to sort=-created
	 *
	 * @param Field|string Field object or name of field
	 * @param string $selectorString Selector string with query
	 * @return WebmentionArray
	 * @throws WireException
	 */
	public function find($field, $selectorString)
	{

		if ( is_string($field) )
		{
			$field = $this->wire('fields')->get($field);
		}

		if ( !$field instanceof Field )
		{
			throw new WireException('Arg 1 to find() must be a field');
		}

		$limit = 10;
		$start = 0;
		$desc = TRUE;
		$sort = 'created';
		$database = $this->wire('database');
		$table = $database->escapeTable($field->getTable());
		$sql =  "SELECT * FROM `$table` WHERE id > 0 ";
		$sqlCount = "SELECT COUNT(*) FROM `$table` WHERE id > 0 ";
		$selectors = new Selectors($selectorString);

		foreach ( $selectors as $selector )
		{
			$f = $database->escapeCol($selector->field);
			$operator = $selector->operator;
			$value = $selector->value;
			$_sql = '';

			if ( !$database->isOperator($operator) )
			{
				continue;
			}

			if ( is_array($f) )
			{
				$f = reset($f);
			}

			if ( is_array($value) )
			{
				$value = reset($value);
			}

			if ( $f == 'page' )
			{
				$f = 'pages_id';
			}

			/*
			if ( $f == 'user' )
			{
				$f = 'created_users_id';
			}
			*/

			if ( in_array($f, array('id', 'status', 'created', 'pages_id')) )
			{
				$_sql .= "AND $f$operator" . ((int) $value)  . " ";
			}
			else if ( $f == 'start' )
			{
				$start = (int) $value;
			}
			else if ( $f == 'limit' )
			{
				$limit = (int) $value;
			}
			else if ( $f == 'sort' )
			{
				$desc = substr($value, 0, 1) == '-';
				$value = trim($value, '-');

				if ( in_array($value, array('sort', 'status', 'id', 'pages_id', 'created', 'published')) )
				{
					$sort = $database->escapeCol($value);
				}

			}
			else
			{
				$value = $database->escapeStr($value);
				$_sql .= "AND $f$operator'$value' ";
			}

			$sql .= $_sql;
			$sqlCount .= $_sql;
		}

		$sql .= "ORDER BY $sort " . ($desc ? 'DESC' : 'ASC') . ' ';
		$sql .= "LIMIT $start, $limit";

		$webmentions = new WebmentionArray();
		$webmentions->setField($field);
		$webmentions->setStart($start);
		$webmentions->setLimit($limit);

		$query = $database->prepare($sql);
		$query->execute();
		$webmentionPages = array();

		while ( $row = $query->fetch(PDO::FETCH_ASSOC) )
		{
			$webmention = new WebmentionItem();
			$webmention->setField($field);

			foreach ( $row as $key => $value )
			{
				if ( $key == 'data' )
				{
					$key = 'microformats';
				}

				$webmention->set($key, $value);
			}

			$pageID = $row['pages_id'];

			if ( isset($webmentionPages[$pageID]) )
			{
				$page = $webmentionPages[$pageID];
				$webmention->setPage($webmentionPages[$pageID]);
			}
			else
			{
				$page = $this->wire('pages')->get((int) $pageID);
				$webmentionPages[$page->id] = $page;
			}

			$webmention->resetTrackChanges(TRUE);
			$webmentions->add($webmention);

			if ( $page->id )
			{
				$webmention->setPage($page);
			}

		}

		$query->closeCursor();
		$query = $database->prepare($sqlCount);
		$query->execute();
		list($total) = $query->fetch(PDO::FETCH_NUM);
		$webmentions->resetTrackChanges();
		$webmentions->setTotal($total);

		return $webmentions;
	} # end method find()

}

