<?php namespace ProcessWire;

use DateTime;


/**
 * Webmentions Manager
 *
 * Manage all webmentions field data in chronological order.
 *
 * Borrowed heavily from the Comments Manager module.
 *
 * @author Gregor Morrill, https://gregorlove.com
 * @see https://webmention.net/
 */

class ProcessWebmentionsManager extends Process
{
	/**
	 * The name that will be used for the page this module creates
	 *
	 * It should be unique and the same (or similar) to the module name, but all lowercase.
	 * It should not be the same as any other ProcessWire admin page name.
	 */
	const pageName = 'webmentions-manager';

	/**
	 * Statuses and labels that a WebmentionItem can have
	 * @var array
	 * @access protected
	 */
	protected $statuses = array();


	/**
	 * Number of webmentions to show per page
	 * @var int
	 * @access protected
	 */
	protected $limit = 10;


	/**
	 * Return information about this module (required)
	 * @access public
	 */
	public static function getModuleInfo()
	{
		return array(
			'title' => 'Webmentions Manager',
			'version' => 112,
			'author' => 'gRegor Morrill',
			'summary' => 'Manage webmentions in your site outside of the page editor.',
			'href' => 'https://gregorlove.com',
			'singular'	=> true,
			'autoload'	=> true,
			'icon' => 'comments',
			'requires'	=> 'FieldtypeWebmentions',
			'permission' => 'webmentions-manager',
			'permissions' => array(
				'webmentions-manager' => 'Use the webmentions manager',
			),
			'page' => array(
				'name' => 'webmentions',
				'parent' => 'setup',
				'title' => 'Webmentions',
			),
		);
	} # end method getModuleInfo()


	/**
	 * Initialize the webmentions manager and define the statuses
	 * @access public
	 */
	public function init()
	{
		parent::init();

		$this->modules->get('FieldtypeWebmentions');

		$this->statuses = array(
			WebmentionItem::statusApproved => $this->_('approved'),
			WebmentionItem::statusPending => $this->_('pending'),
			WebmentionItem::statusError => $this->_('error'),
		);
	} # end method init()


	/**
	 * Ask the user to select which webmentions field they want to manage
	 *
	 * Or, redirect to the webmentions field if there is only 1.
	 * @access public
	 * @return string
	 */
	public function ___execute()
	{
		# locate all the FieldtypeWebmentions fields
		$fields = array();

		# loop: each field
		foreach ( $this->fields as $field )
		{

			# if: add FieldtypeWebmentions to $fields array
			if ( $field->type instanceof FieldtypeWebmentions )
			{
				$fields[] = $field;
			} # end if

		} # end loop

		$count = count($fields);

		# if: no webmention fields
		if ( !$count )
		{
			$this->error($this->_('There are no webmentions fields installed'));
			return sprintf('<p> %s </p>', $this->_('Please add a Webmention field to your template(s) first.'));
		} # end if

		# if: only one field; redirect to 'all' for the field
		if ( $count == 1 )
		{
			$field = reset($fields);
			$url = sprintf('%slist/%s/all/', $this->wire('page')->url, $field->name);

			$this->wire('session')->redirect($url, false);
			return;
		} # end if

		$output = sprintf('<h2> %s </h2> <ul>', $this->_('Please select a webmentions field'));

		foreach ( $fields as $field )
		{
			$url = sprintf('%slist/%s/all/', $this->wire('page')->url, $field->name);
			$output .= sprintf('<li> <a href="%s">%s</a> </li>',
				$url,
				$field->name
			);
		}

		$output .= '</ul>';

		return $output;
	} # end method ___execute()


	/**
	 * Execute the webmentions list
	 * @access public
	 */
	public function ___executeList()
	{
		$name = $this->sanitizer->fieldName($this->input->urlSegment2);

		if ( !$name )
		{
			$this->error($this->_('No webmentions field specified in URL'));
			$this->session->redirect($this->page->url, false);
		}

		$field = $this->fields->get($name);

		if ( !$field || !$field->type instanceof FieldtypeWebmentions )
		{
			$this->error($this->_('Unrecognized field'));
			$this->session->redirect($this->page->url, false);
		}

		$status = $this->input->urlSegment3;

		if ( empty($status) || ($status != 'all' && !in_array($status, $this->statuses)) )
		{
			$url = sprintf('%slist/%s/all/', $this->wire('page')->url, $field->name);
			$this->wire('session')->redirect($url, false);
		}

		$this->breadcrumb('../', $field->getLabel());

		$headline = ucfirst($status);
		$this->headline($headline);

		$limit = (int) $this->limit;
		$start = ($this->input->pageNum - 1) * $limit;
		$sort = '-created';
		$selector = sprintf('start=%d, limit=%d, sort=%s', $start, $limit, $sort);

		if ( $status != 'all' )
		{
			$selector .= ', status=' . array_search($status, $this->statuses);
		}

		$webmentions = $field->type->find($field, $selector);

		if ( $this->input->post->processWebmentions )
		{
			$webmentions = $this->wire('modules')->get('InputfieldWebmentions')->processFormInput($webmentions);
		}

		return $this->renderWebmentions($webmentions);
	} # end method ___executeList()


	/**
	 * Render the markup for a single webmention
	 * @param WebmentionItem
	 * @access protected
	 */
	protected function renderWebmention(WebmentionItem $webmention)
	{
		$output = '';

		$options_status = array(
			WebmentionItem::statusApproved => $this->_x('Approved', 'webmention-status'),
			WebmentionItem::statusPending => $this->_x('Pending', 'webmention-status'),
			WebmentionItem::statusError => $this->_x('Error', 'webmention-status'),
		);

		$options_visibility = array(
			WebmentionItem::visibilityPublic => $this->_x('Public', 'webmention-visibility'),
			WebmentionItem::visibilityPrivate => $this->_x('Private', 'webmention-visibility'),
		);

		$field = $webmention->getField();

		$label_status = $options_status[$webmention->status];
		$label_visibility = $options_visibility[$webmention->visibility];

		$select_action = $this->modules->get('InputfieldWebmentions')->generateActionSelect($field->name, $webmention->id);
		$select_visibility = $this->modules->get('InputfieldWebmentions')->generateVisibilitySelect($field->name, $webmention->id, $webmention->visibility);

		# if: approved webmention
		if ( $webmention->status == WebmentionItem::statusApproved )
		{
			$published = new DateTime($webmention->published);
			$display_published = $published->format('F j, Y g:ia');

			$author_url = $webmention->author_url;
			$author_name = htmlspecialchars($webmention->author_name);
			$webmention_hostname = preg_replace('#^www\.(.+\.)#i', '$1', parse_url($webmention->url, PHP_URL_HOST));

			$display_avatar = '';

			# if: display author avatar
			if ( $webmention->author_photo )
			{
				$display_avatar .= sprintf('<img src="%s" alt="" />', $webmention->author_photo);
			}
			else if ( $webmention->author_email )
			{
				$display_avatar .= sprintf('<img src="https://www.gravatar.com/avatar/%s?s=%s&d=mm&r=pg" alt="" />',
					md5(strtolower(trim($webmention->author_email))),
					50
				);
			}

			# if: webmention is a 'like'
			if ( $webmention->is_like )
			{
				$webmention_content = __('likes this');
			}
			# else: show webmention content
			else
			{
				$webmention_content = ( $webmention->content_plain ) ? htmlspecialchars($webmention->content_plain) : htmlspecialchars($webmention->name);
			} # end if

			$display_microformats = htmlspecialchars($webmention->microformats);

			$output .= <<< END
		<li id="WebmentionsItem{$webmention->id}" class="Inputfield WebmentionsItem{$label_status} ui-widget">

			<label class="WebmentionsItemHead InputfieldHeader ui-widget-header">
				<i class="toggle-icon fa fa-angle-down" data-to="fa-angle-down fa-angle-right"></i>
				<span class="WebmentionsItemHeadLabel"> {$label_status} ($label_visibility) </span>
				<span class="WebmentionItemBy"> {$author_name} â€“ {$display_published} </span>
			</label>

			<div class="InputfieldContent WebmentionItem ui-widget-content">

				<div class="avatar"> {$display_avatar} </div>

				<div class="content">

					<p> <strong><a href="{$author_url}">{$author_name}</a></strong> on <a href="{$webmention->url}">{$webmention_hostname}</a> </p>

					<p> {$webmention_content} </p>

					<p> <a href="{$webmention->target_url}" target="_blank">{$display_published}</a> </p>

					<div class="WebmentionActions">
						<p> <label>Action: {$select_action}</label> </p>
						<p> <label>Visibility: {$select_visibility}</label> </p>
					</div>

					<div class="WebmentionAdvanced">
						<a href="#" class="show-advanced">Advanced information</a>
<pre>
Source: {$webmention->source_url}
Target: {$webmention->target_url}
Vouch: {$webmention->vouch_url}
Type: {$webmention->type}
Is Like: {$webmention->is_like}
Is Repost: {$webmention->is_repost}
Is RSVP: {$webmention->is_rsvp}
MD5 Key: {$webmention->md5key}
Email: {$webmention->author_email}

Parsed microformats:
{$display_microformats}
						</pre>
					</div>

				</div>

			</div>

		</li>
END;
		}
		# else:
		else
		{
			$webmention_hostname = preg_replace('#^www\.(.+\.)#i', '$1', parse_url($webmention->source_url, PHP_URL_HOST));

			$webmention_content = '';

			if ( $webmention->name )
			{
				$webmention_content = sprintf('<p> %s </p>', htmlspecialchars($webmention->name));
			}

			$output .= <<< END
		<li id="WebmentionsItem{$webmention->id}" class="Inputfield WebmentionsItem{$label_status} ui-widget">

			<label class="WebmentionsItemHead InputfieldHeader ui-widget-header" for="">
				<i class="toggle-icon fa fa-angle-down" data-to="fa-angle-down fa-angle-right"></i>
				<span class="WebmentionsItemHeadLabel"> {$label_status} </span>
				<span class="WebmentionItemBy"> Mention from {$webmention_hostname} </span>
			</label>

			<div class="InputfieldContent WebmentionItem ui-widget-content">

				<div class="avatar"> &nbsp; </div>

				<div class="content">

					{$webmention_content}

					<div class="WebmentionActions">
						<p> <label>Action: {$select_action}</label> </p>
						<p> <label>Visibility: {$select_visibility}</label> </p>
					</div>

					<div class="WebmentionAdvanced">
						<a href="#" class="show-advanced">Advanced information</a>
<pre>
Source: {$webmention->source_url}
Target: {$webmention->target_url}
Vouch: {$webmention->vouch_url}
MD5 Key: {$webmention->md5key}
</pre>
					</div>

				</div>

			</div>

		</li>
END;
		} # end if

		return $output;
	} # end method renderWebmention()


	/**
	 * @access protected
	 */
	protected function getQueryString()
	{
		$queryString = '';

		foreach ( $this->input->whitelist as $key => $value )
		{
			$queryString .= $this->wire('sanitizer')->entities($key) . '=' . $this->wire('sanitizer')->entities($value) . '&';
		}

		$queryString = trim($queryString, '&');

		if ( $queryString )
		{
			$queryString = "?$queryString";
		}

		return $queryString;
	} # end method getQueryString()


	/**
	 * Render the markup for a list of webmentions
	 * @param WebmentionArray $webmentions
	 * @access protected
	 */
	protected function renderWebmentions(WebmentionArray $webmentions)
	{
		$count = 0;

		$display_webmentions =
		$output = '';

		$status = $this->input->urlSegment3;
		$start = $webmentions->getStart();
		$limit = $webmentions->getLimit();
		$total = $webmentions->getTotal();

		$pageNumPrefix = $this->config->pageNumUrlPrefix;
		$pageNum = $this->input->pageNum;
		$queryString = http_build_query($this->input->whitelist->getArray());

		# Build pagination
		$pa = new PageArray();
		$pa->setTotal($total)->setLimit($limit)->setStart($start);

		$pager = $this->wire('modules')->get('MarkupPagerNav');
		$display_pagination = $pager->render(
			$pa,
			array(
				'queryString' => $queryString,
				'baseUrl' => './'
			)
		);

		$wt = $this->modules->get('JqueryWireTabs');
		$tabs = array();

		$class = ( $status == 'all' ) ? 'on' : '';
		$tabs['tabStatusAll'] = sprintf('<a class="%s" href="../all/">%s</a>', $class, $this->_('All'));

		foreach ( $this->statuses as $key => $label )
		{
			$class = ( $status == $label ) ? 'on' : '';
			$tabs['tabStatus' . $key] = sprintf('<a class="%s" href="../%s/">%s</a>', $class, $label, ucfirst($label));
		}

		$display_tabs = $wt->renderTabList($tabs);

		# loop: each webmention
		foreach ( $webmentions as $webmention )
		{
			$display_webmentions .= $this->renderWebmention($webmention);
			$count++;
		} # end loop: each webmention

		$headline = ( $start + 1 ) . 'â€“' . ( $start + $count ) . " " . sprintf($this->_('of %d'), $total);

		if ( $count )
		{
			$button = $this->modules->get('InputfieldSubmit');
			$button->attr('name', 'processWebmentions');
			$button->attr('class', $button->attr('class') . ' head_button_clone');
			$button = $button->render();
		}
		else
		{
			$button = '';
		}

		if ( $this->input->pageNum > 1 )
		{
			$queryString = "./$pageNumPrefix$pageNum$queryString";
		}

		if ( !count($webmentions) )
		{
			$headline = $this->_('No webmentions to display.');
		}

		$output = <<< END
{$display_tabs}
{$display_pagination}

<h2> {$headline} </h2>

<form method="post" action="{$queryString}">

	<ul class="Inputfields InputfieldWebmentionsList"> {$display_webmentions} </ul>

	{$display_pagination}

	{$button}

</form>
END;

		return $output;
	} # end method renderWebmentions()


	/**
	 * This method handles uninstalling the module
	 * @access public
	 */
	public function ___unInstall()
	{
		$page = $this->pages->get($this->config->adminRootPageID)->child('name=setup')->child('name=' . self::pageName);
		$page->delete();
	} # end method ___unInstall()


	/**
	 * @access public
	 */
	public function ___install()
	{
		# create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName;

		# installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this;

		# we will make the page title the same as our module title
		# but you can make it whatever you want
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		# save the page
		$page->save();

		# tell the user we created this page
		$this->message("Created Page: {$page->path}");
	} # end method ___install()

}

