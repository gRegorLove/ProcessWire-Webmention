<?php

/**
 * ProcessWire InputfieldWebmentions
 *
 * An Inputfield for handling administration of webmentions.
 *
 * @author Gregor Morrill, http://gregorlove.com
 * @see http://indiewebcamp.com/webmention
 */

class InputfieldWebmentions extends Inputfield implements InputfieldItemList
{

	/**
	 * Provide module information to ProcessWire
	 * @access public
	 */
	public static function getModuleInfo()
	{
		return array(
			'title'		=> 'Webmentions',
			'version'	=> 100,
			'summary'	=> 'Input field for webmentions.',
			'requires'	=> 'FieldtypeWebmentions',
		);
	} # end method getModuleInfo()


	/**
	 * Per the Module interface, init() is called when the system is ready for API usage
	 * @access public
	 */
	public function init()
	{
		parent::init();

		$date = new DateTime();
		$gmt_offset = $date->format('P');
		$this->database->query("SET @@session.time_zone = '{$gmt_offset}'");
	} # end method init()


	/**
	 * This method handles rendering the input area for Webmentions
	 * @access public
	 */
	public function ___render()
	{

		# if: no Webmentions yet
		if ( !count($this->value) )
		{
			return sprintf('<p> %s </p>', $this->_('There are currently no webmentions to display.'));
		} # end if

		$output = '';

		$options_status = array(
			WebmentionItem::statusApproved => $this->_x('Approved', 'webmention-status'),
			WebmentionItem::statusPending => $this->_x('Pending', 'webmention-status'),
			WebmentionItem::statusError => $this->_x('Error', 'webmention-status'),
		);

		$options_visibility = array(
			WebmentionItem::visibilityPublic => $this->_x('Public', 'webmention-visibility'),
			WebmentionItem::visibilityPrivate => $this->_x('Private', 'webmention-visibility'),
		);

		$output .= '<ul class="Inputfields InputfieldWebmentionsList">';

		# loop: each webmention
		foreach ( $this->attr('value') as $count => $webmention )
		{
			$select_action = $this->generateActionSelect($this->name, $webmention->id);

			$label_visibility = $options_visibility[$webmention->visibility];
			$select_visibility = $this->generateVisibilitySelect($this->name, $webmention->id, $webmention->visibility);

			# if: approved webmention
			if ( $webmention->status == WebmentionItem::statusApproved )
			{
				$label_status = $options_status[WebmentionItem::statusApproved];

				$published = new DateTime($webmention->published);
				$display_published = $published->format('F j, Y g:ia');

				$author_url = $webmention->author_url;
				$author_hostname = parse_url($author_url, PHP_URL_HOST);
				$author_name = htmlspecialchars($webmention->author_name);
				$webmention_content = htmlspecialchars($webmention->name);

				$output .= <<< END
		<li id="WebmentionsItem{$webmention->id}" class="Inputfield WebmentionsItem{$label_status} InputfieldStateCollapsed ui-widget">

			<label class="WebmentionsItemHead InputfieldHeader ui-widget-header" for="">
				<i class="toggle-icon fa fa-angle-down" data-to="fa-angle-down fa-angle-right"></i>
				<span class="WebmentionsItemHeadLabel"> {$label_status} ($label_visibility) </span>
				<span class="WebmentionItemBy"> {$webmention->author_name} â€“ {$display_published} </span>
			</label>

			<div class="InputfieldContent ui-widget-content">

				<div class="WebmentionSummary">

					<img src="{$webmention->author_photo}" alt="" class="avatar" />

					<p> <strong><a href="{$webmention->author_url}">{$author_hostname}</a></strong> <a href="{$webmention->author_url}">{$author_name}</a> </p>

					<p> {$webmention_content} </p>

					<p> <a href="{$webmention->url}">{$display_published}</a> </p>

					<div class="WebmentionActions">

						<p> <label>Action: {$select_action}</label> </p>

						<p> <label>Visibility: {$select_visibility}</label> </p>

					</div>

				</div>

			</div>

		</li>
END;
			}
			# else: webmention pending
			else
			{
				$label_status = $options_status[$webmention->status];
				// $label_status = $options_status[WebmentionItem::statusPending];
				$hostname = parse_url($webmention->source_url, PHP_URL_HOST);

				$webmention_content = '';

				if ( $webmention->name )
				{
					$webmention_content = sprintf('<p> %s </p>', htmlspecialchars($webmention->name));
				}

				$output .= <<< END
		<li id="WebmentionsItem{$webmention->id}" class="Inputfield WebmentionsItem{$label_status} ui-widget">

			<label class="WebmentionsItemHead InputfieldHeader ui-widget-header" for="">
				<i class="toggle-icon fa fa-angle-down" data-to="fa-angle-down fa-angle-right"></i>
				<span class="WebmentionsItemHeadLabel"> {$label_status} </span>
				<span class="WebmentionItemBy"> Mention from {$hostname} </span>
			</label>

			<div class="InputfieldContent ui-widget-content">

				<div class="WebmentionSummary">

					{$webmention_content}

					<p> Source: <a href="{$webmention->source_url}" target="_blank">{$webmention->source_url} <i class="fa fa-external-link"></i></a> </p>

					<div class="WebmentionActions">

						<p> <label>Action: {$select_action}</label> </p>

						<p> <label>Visibility: {$select_visibility}</label> </p>

					</div>

				</div>

			</div>

		</li>
END;
			} # end if

		} # end loop: each webmention

		$output .= '</ul>';

		return $output;
	} # end method ___render()


	/**
	 * This method handles generating an action <select>
	 * @param string $name
	 * @param int $id
	 * @param string $selected_value
	 * @access public
	 * @return string
	 */
	public function generateActionSelect($name, $id, $selected_value = '')
	{
		$html = '';

		$options = array(
			WebmentionItem::actionProcess => $this->_x('Process', 'webmention-action'),
			WebmentionItem::actionDelete => $this->_x('Delete', 'webmention-action'),
			WebmentionItem::actionNone => $this->_x('None', 'webmention-action'),
		);

		$html .= sprintf('<select name="%s_action_%d">', $name, $id);

		# loop: each status option
		foreach ( $options as $value => $label )
		{
			$selected_attribute = ( $selected_value == $value ) ? ' selected="selected"' : '';

			$html .= sprintf('<option value="%s"%s>%s</option>',
				$value,
				$selected_attribute,
				$label
			);
		} # end loop: each status option

		$html .= '</select>';

		return $html;
	} # end method generateActionSelect()


	/**
	 * This method handles generating a status <select>
	 * @param string $name
	 * @param int $id
	 * @param string $selected_value
	 * @access public
	 * @return string
	 */
	public function generateVisibilitySelect($name, $id, $selected_value = '')
	{
		$html = '';

		$options = array(
			WebmentionItem::visibilityPublic => $this->_x('Public', 'webmention-visibility'),
			WebmentionItem::visibilityPrivate => $this->_x('Private', 'webmention-visibility'),
		);

		$html .= sprintf('<select name="%s_visibility_%d">', $name, $id);

		# loop: each visibility option
		foreach ( $options as $value => $label )
		{
			$selected_attribute = ( $selected_value == $value ) ? ' selected="selected"' : '';

			$html .= sprintf('<option value="%s"%s>%s</option>',
				$value,
				$selected_attribute,
				$label
			);
		} # end loop: each visibility option

		$html .= '</select>';

		return $html;
	} # end method generateVisibilitySelect()


	/**
	 * Process the input from the given WireInputData (usually $input->get or $input->post), load and clean the value for use in this Inputfield.
	 *
	 * @param WireInputData $input
	 * @return $this
	 */
	public function ___processInput(WireInputData $input)
	{
		$this->value = $this->processFormInput($this->value);
		return $this;




		$fields = array(
			'action',
			'visibility',
		);

		$webmention_module = wire('modules')->get('Webmention');

		echo '<pre>', print_r($this->value); exit;

		# loop:
		foreach ( $this->value as $webmention )
		{
			// echo '<pre>', print_r($webmention), '</pre>'; exit;
			$data = array();

			# loop:
			foreach ( $fields as $field )
			{
				$input_name = sprintf('%s_%s_%d', $this->name, $field, $webmention->id);

				if ( isset($input[$input_name]) )
				{
					$data[$field] = $input[$input_name];
				}

			} # end loop

			# if: status field exists
			if ( !empty($data['action']) )
			{

				if ( $data['action'] == WebmentionItem::actionProcess )
				{
					$result = $webmention_module->processWebmention($webmention);
					$this->message(sprintf($this->_('Processed webmention #%d'), $webmention->id));
					$this->value->trackChange('update');
				} # end if

				# if: delete
				if ( $data['action'] == WebmentionItem::actionDelete )
				{
					$this->value->remove($webmention);
					$this->message(sprintf($this->_('Deleted webmention #%d'), $webmention->id));
					$this->value->trackChange('remove');
					continue;
				} # end if

			} # end if

/*			if ( $data['action'] )
			{
				echo '<pre>', print_r($webmention), '</pre>';
			}*/

			unset($data['action']);

			# loop:
			foreach ( $data as $key => $value )
			{

				if ( $webmention->$key != $value )
				{
					$webmention->$key = $value;
					$this->message(sprintf($this->_('Updated %s for webmention #%d'), $key, $webmention->id));
					$this->value->trackChange('update');
				}

			} # end loop

		} # end loop

		// exit;

		return $this;
	} # end method ___processInput()


	/**
	 * This method processes webmentions when called from the InputField or the ProcessWebmentionsManager
	 * @param WebmentionArray $webmentions
	 * @access public
	 * @return WebmentionArray
	 */
	public function processFormInput(WebmentionArray $webmentions)
	{
		$webmention_module = wire('modules')->get('Webmention');

		# loop: each webmention
		foreach ( $webmentions as $webmention )
		{
			$is_updated = FALSE;

			$page = $webmention->getPage();
			$field = $webmention->getField();

			$field_name = sprintf('%s_action_%d', $field->name, $webmention->id);
			$action = $this->input->post($field_name);

			$field_name = sprintf('%s_visibility_%d', $field->name, $webmention->id);
			$visibility = $this->input->post($field_name);

			# if: visibility has changed
			if ( $webmention->visibility != $visibility )
			{
				$is_updated = TRUE;
				$webmention->set('visibility', $visibility);
				$this->message(sprintf($this->_('Updated visibility for webmention #%d'), $webmention->id));
			} # end if

			# if: action selected
			if ( $action )
			{
				$processed_webmention = $webmention;

				# if: delete the webmention
				if ( $action == WebmentionItem::actionDelete )
				{
					$webmentions->remove($webmention);
					$this->message(sprintf($this->_('Deleted webmention #%d'), $webmention->id));
					$webmentions->trackChange('remove');

					continue;
				}
				# else if: process the webmention
				else if ( $action == WebmentionItem::actionProcess )
				{
					$is_updated = TRUE;
					$webmention_module->processWebmention($webmention);
				} # end if

			} # end if: action selected

			if ( $is_updated && $webmention_module->saveWebmention($webmention) )
			{
				$this->message(sprintf($this->_('Processed webmention #%d'), $webmention->id));
				$webmentions->trackChange('update');
			}

		} # end loop: each webmention

		return $webmentions;
	} # end method processFormInput()


	/**
	 * This method
	 * @param array
	 * @access public
	 * @return
	 */
	public function test(WebmentionArray $webmentions, $FieldType)
	{
		error_reporting(E_ALL);
		// echo '<pre>', print_r($this); exit;
		$fields = array(
			'action',
			'visibility',
		);

		$webmention_module = wire('modules')->get('Webmention');

		// header('Content-Type: text/plain; charset=utf8');
		// $test = $webmentions->get(0);
		// echo print_r($test), print_r($webmentions); exit;

		$WebmentionField = $FieldType->name;

		# loop:
		foreach ( $webmentions as $webmention )
		{
			$page = $webmention->getPage();
			$processed_webmention = $webmention;

			$data = array();

			# loop:
			foreach ( $fields as $field )
			{
				$input_name = sprintf('%s_%s_%d', 'InputfieldWebmentions', $field, $webmention->id);

				if ( $this->input->post[$input_name] ) #isset($input[$input_name])
				{
					$data[$field] = $this->input->post[$input_name];
				}

			} # end loop

			// echo print_r($data), print_r($this->input->post); exit;

			# if: status field exists
			if ( !empty($data['action']) )
			{

				if ( $data['action'] == WebmentionItem::actionProcess )
				{
					$result = $webmention_module->processWebmention($processed_webmention);
					// echo "DEBUGGING\n\n";
					// print_r($processed_webmention); exit;
					$this->message(sprintf($this->_('Processed webmention #%d'), $processed_webmention->id));
					#$this->value->trackChange('update');
				} # end if

				# if: delete
				if ( $data['action'] == WebmentionItem::actionDelete )
				{
					$this->value->remove($webmention);
					$this->message(sprintf($this->_('Deleted webmention #%d'), $webmention->id));
					$this->value->trackChange('remove');
					continue;
				} # end if

				unset($data['action']);

				$page->$WebmentionField->setTrackChanges(TRUE);
				$page->$WebmentionField->set($webmention->id, $processed_webmention);

				$outputFormatting = $page->outputFormatting;
				$page->setOutputFormatting(FALSE);

				$saveOptions = array(
					'quiet' => TRUE
				);

				$test = $page->save($WebmentionField, $saveOptions);
				$page->setOutputFormatting($outputFormatting);

				/*
				# loop:
				foreach ( $data as $key => $value )
				{

					if ( $processed_webmention->$key != $value )
					{
						$processed_webmention->$key = $value;
						// $this->message(sprintf($this->_('Updated %s for webmention #%d'), $key, $webmention->id));
						// $this->value->trackChange('update');
					}

				} # end loop
				*/

			} # end if

		} # end loop

		return;
	} # end method test()

}
