<?php

/**
 * ProcessWire InputfieldWebmentions
 *
 * An Inputfield for handling administration of webmentions.
 *
 * @author Gregor Morrill, http://gregorlove.com
 * @see http://indiewebcamp.com/webmention
 */

class InputfieldWebmentions extends Inputfield implements InputfieldItemList
{
	/**
	 * Provide module information to ProcessWire
	 * @access public
	 */
	public static function getModuleInfo()
	{
		return array(
			'title'		=> 'Webmentions',
			'version'	=> 100,
			'summary'	=> 'Input field for webmentions.',
			'requires'	=> 'FieldtypeWebmentions',
		);
	} # end method getModuleInfo()


	/**
	 * Per the Module interface, init() is called when the system is ready for API usage
	 * @access public
	 */
	public function init()
	{
		parent::init();

		# Ensure the MySQL session.time_zone is set to the PW timezone
		$date = new DateTime();
		$gmt_offset = $date->format('P');
		$this->database->query("SET @@session.time_zone = '{$gmt_offset}'");
	} # end method init()


	/**
	 * This method handles rendering the input area for Webmentions
	 * @access public
	 */
	public function ___render()
	{

		# if: no Webmentions yet
		if ( !count($this->value) )
		{
			return sprintf('<p> %s </p>', $this->_('There are currently no webmentions to display.'));
		} # end if

		$output = '';

		$options_status = array(
			WebmentionItem::statusApproved => $this->_x('Approved', 'webmention-status'),
			WebmentionItem::statusPending => $this->_x('Pending', 'webmention-status'),
			WebmentionItem::statusError => $this->_x('Error', 'webmention-status'),
		);

		$options_visibility = array(
			WebmentionItem::visibilityPublic => $this->_x('Public', 'webmention-visibility'),
			WebmentionItem::visibilityPrivate => $this->_x('Private', 'webmention-visibility'),
		);

		$output .= '<ul class="Inputfields InputfieldWebmentionsList">';

		# loop: each webmention
		foreach ( $this->attr('value') as $count => $webmention )
		{
			$label_status = $options_status[$webmention->status];
			$label_visibility = $options_visibility[$webmention->visibility];

			$select_action = $this->generateActionSelect($this->name, $webmention->id);
			$select_visibility = $this->generateVisibilitySelect($this->name, $webmention->id, $webmention->visibility);

			# if: approved webmention
			if ( $webmention->status == WebmentionItem::statusApproved )
			{
				$published = new DateTime($webmention->published);
				$display_published = $published->format('F j, Y g:ia');

				$author_url = $webmention->author_url;
				$author_name = htmlspecialchars($webmention->author_name);
				$webmention_hostname = preg_replace('#^www\.(.+\.)#i', '$1', parse_url($webmention->url, PHP_URL_HOST));

				$display_avatar = '';

				# if: display author avatar
				if ( $webmention->author_photo )
				{
					$display_avatar .= sprintf('<img src="%s" alt="" />', $webmention->author_photo);
				} # end if

				# if: webmention is a 'like'
				if ( $webmention->is_like )
				{
					$webmention_content = __('likes this');
				}
				# else: show webmention content
				else
				{
					$webmention_content = ( $webmention->content_plain ) ? htmlspecialchars($webmention->content_plain) : htmlspecialchars($webmention->name);
				} # end if

				$display_microformats = htmlspecialchars($webmention->microformats);

				$output .= <<< END
		<li id="WebmentionsItem{$webmention->id}" class="Inputfield WebmentionsItem{$label_status} InputfieldStateCollapsed ui-widget">

			<label class="WebmentionsItemHead InputfieldHeader ui-widget-header">
				<i class="toggle-icon fa fa-angle-down" data-to="fa-angle-down fa-angle-right"></i>
				<span class="WebmentionsItemHeadLabel"> {$label_status} ($label_visibility) </span>
				<span class="WebmentionItemBy"> {$author_name} â€“ {$display_published} </span>
			</label>

			<div class="InputfieldContent WebmentionItem ui-widget-content">

				<div class="avatar"> {$display_avatar} </div>

				<div class="content">

					<p> <strong><a href="{$author_url}">{$author_name}</a></strong> on <a href="{$webmention->url}">{$webmention_hostname}</a> </p>

					<p> {$webmention_content} </p>

					<p> <a href="{$webmention->target_url}" target="_blank">{$display_published}</a> </p>

					<div class="WebmentionActions">
						<p> <label>Action: {$select_action}</label> </p>
						<p> <label>Visibility: {$select_visibility}</label> </p>
					</div>

					<div class="WebmentionAdvanced">
						<a href="#" class="show-advanced">Advanced information</a>
<pre>
Source: {$webmention->source_url}
Target: {$webmention->target_url}
Vouch: {$webmention->vouch_url}
Type: {$webmention->type}
Is Like: {$webmention->is_like}
Is Repost: {$webmention->is_repost}
Is RSVP: {$webmention->is_rsvp}
MD5 Key: {$webmention->md5key}

Parsed microformats:
{$display_microformats}
						</pre>
					</div>

				</div>

			</div>

		</li>
END;
			}
			# else: webmention pending
			else
			{
				$webmention_hostname = preg_replace('#^www\.(.+\.)#i', '$1', parse_url($webmention->source_url, PHP_URL_HOST));

				$webmention_content = '';

				if ( $webmention->name )
				{
					$webmention_content = sprintf('<p> %s </p>', htmlspecialchars($webmention->name));
				}

				$output .= <<< END
		<li id="WebmentionsItem{$webmention->id}" class="Inputfield WebmentionsItem{$label_status} ui-widget">

			<label class="WebmentionsItemHead InputfieldHeader ui-widget-header" for="">
				<i class="toggle-icon fa fa-angle-down" data-to="fa-angle-down fa-angle-right"></i>
				<span class="WebmentionsItemHeadLabel"> {$label_status} </span>
				<span class="WebmentionItemBy"> Mention from {$webmention_hostname} </span>
			</label>

			<div class="InputfieldContent WebmentionItem ui-widget-content">

				<div class="avatar"> &nbsp; </div>

				<div class="content">

					{$webmention_content}

					<div class="WebmentionActions">
						<p> <label>Action: {$select_action}</label> </p>
						<p> <label>Visibility: {$select_visibility}</label> </p>
					</div>

					<div class="WebmentionAdvanced">
						<a href="#" class="show-advanced">Advanced information</a>
<pre>
Source: {$webmention->source_url}
Target: {$webmention->target_url}
Vouch: {$webmention->vouch_url}
MD5 Key: {$webmention->md5key}
</pre>
					</div>

				</div>

			</div>

		</li>
END;
			} # end if

		} # end loop: each webmention

		$output .= '</ul>';

		return $output;
	} # end method ___render()


	/**
	 * This method handles generating an action <select>
	 * @param string $name
	 * @param int $id
	 * @param string $selected_value
	 * @access public
	 * @return string
	 */
	public function generateActionSelect($name, $id, $selected_value = '')
	{
		$html = '';

		$options = array(
			WebmentionItem::actionProcess => $this->_x('Process', 'webmention-action'),
			WebmentionItem::actionDelete => $this->_x('Delete', 'webmention-action'),
			WebmentionItem::actionNone => $this->_x('None', 'webmention-action'),
		);

		$html .= sprintf('<select name="%s_action_%d">', $name, $id);

		# loop: each status option
		foreach ( $options as $value => $label )
		{
			$selected_attribute = ( $selected_value == $value ) ? ' selected="selected"' : '';

			$html .= sprintf('<option value="%s"%s>%s</option>',
				$value,
				$selected_attribute,
				$label
			);
		} # end loop: each status option

		$html .= '</select>';

		return $html;
	} # end method generateActionSelect()


	/**
	 * This method handles generating a status <select>
	 * @param string $name
	 * @param int $id
	 * @param string $selected_value
	 * @access public
	 * @return string
	 */
	public function generateVisibilitySelect($name, $id, $selected_value = '')
	{
		$html = '';

		$options = array(
			WebmentionItem::visibilityPublic => $this->_x('Public', 'webmention-visibility'),
			WebmentionItem::visibilityPrivate => $this->_x('Private', 'webmention-visibility'),
		);

		$html .= sprintf('<select name="%s_visibility_%d">', $name, $id);

		# loop: each visibility option
		foreach ( $options as $value => $label )
		{
			$selected_attribute = ( $selected_value == $value ) ? ' selected="selected"' : '';

			$html .= sprintf('<option value="%s"%s>%s</option>',
				$value,
				$selected_attribute,
				$label
			);
		} # end loop: each visibility option

		$html .= '</select>';

		return $html;
	} # end method generateVisibilitySelect()


	/**
	 * Process the input from the given WireInputData (usually $input->get or $input->post), load and clean the value for use in this Inputfield.
	 *
	 * @param WireInputData $input
	 * @access public
	 * @return $this
	 */
	public function ___processInput(WireInputData $input)
	{
		$this->value = $this->processFormInput($this->value);
		return $this;
	} # end method ___processInput()


	/**
	 * This method processes webmentions when called from the InputField or the ProcessWebmentionsManager
	 * @param WebmentionArray $webmentions
	 * @access public
	 * @return WebmentionArray
	 */
	public function processFormInput(WebmentionArray $webmentions)
	{
		$webmention_module = wire('modules')->get('Webmention');

		# loop: each webmention
		foreach ( $webmentions as $webmention )
		{
			$is_updated = FALSE;

			$page = $webmention->getPage();
			$field = $webmention->getField();

			$field_name = sprintf('%s_action_%d', $field->name, $webmention->id);
			$action = $this->input->post($field_name);

			$field_name = sprintf('%s_visibility_%d', $field->name, $webmention->id);
			$visibility = $this->input->post($field_name);

			# if: visibility has changed
			if ( $webmention->visibility != $visibility )
			{
				$is_updated = TRUE;
				$webmention->set('visibility', $visibility);
				$this->message(sprintf($this->_('Updated visibility for webmention #%d'), $webmention->id));
			} # end if

			# if: action selected
			if ( $action )
			{
				$processed_webmention = $webmention;

				# if: delete the webmention
				if ( $action == WebmentionItem::actionDelete )
				{
					$webmentions->remove($webmention);
					$this->message(sprintf($this->_('Deleted webmention #%d'), $webmention->id));
					$webmentions->trackChange('remove');

					continue;
				}
				# else if: process the webmention
				else if ( $action == WebmentionItem::actionProcess )
				{
					$is_updated = TRUE;
					$webmention_module->processWebmention($webmention);
				} # end if

			} # end if: action selected

			if ( $is_updated && $webmention_module->saveWebmention($webmention) )
			{
				$this->message(sprintf($this->_('Processed webmention #%d'), $webmention->id));
				$webmentions->trackChange('update');
			}

		} # end loop: each webmention

		return $webmentions;
	} # end method processFormInput()

}
